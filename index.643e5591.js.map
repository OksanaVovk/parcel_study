{"mappings":"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","sources":["src/createFilmsList.js","src/createFilmCard.js","src/fetchFilmModal.js","src/index.js","src/NewApiSearchFilms.js","src/NewApiPopularFilms.js"],"sourcesContent":["export default function createFilmsList(dates) {\n  const filmArray = dates[0].results;\n  const genreArray = dates[1].genres;\n  return filmArray\n    .map(\n      ({\n        original_title,\n        poster_path,\n        original_name,\n        genre_ids,\n        release_date,\n        id,\n      }) => {\n        return `<div class=\"film-card\">\n        <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\"  alt=\"\" loading=\"lazy\" data-id=${id} />\n        <div class=\"info\">\n          <p class=\"film-name\">${\n            original_title ? original_title : original_name\n          }\n          </p>\n          <p class=\"info-item\">\n            <b>${genreArray\n              .reduce((listGenre, genre) => {\n                if (genre_ids.includes(genre.id)) {\n                  listGenre.push(` ${genre.name}`);\n                }\n                return listGenre;\n              }, [])\n              .slice(0, 2)\n              .concat([' Other'])} </b >\n            <b>|</b>\n            <b>${release_date ? release_date.slice(0, 4) : '-'}</b>\n          </p>\n        </div>\n      </div>`;\n      }\n    )\n    .join('');\n}\n","export default function createFilmCard(movie) {\n  const {\n    vote_average,\n    vote_count,\n    genres,\n    original_title,\n    poster_path,\n    original_name,\n    popularity,\n    overview,\n    id,\n  } = movie;\n  console.log(genres);\n\n  return `<div class=\"about_film-card\">\n         <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\" class=\"about_film-img\" alt=\"\" loading=\"lazy\" data-id=${id} />\n        <div class=\"about_film-info\">\n          <h1 class=\"about_film-name\">${\n            original_title ? original_title : original_name\n          }\n          </h1>\n          <div class=\"about_film-item\">\n          <p class=\"about_film-text\">Vote / Votes</p>\n          <b class=\"about_film-date\">${vote_average} / ${vote_count}</b>\n          </div>\n          <div class=\"about_film-item\">\n          <p class=\"about_film-text\">Popularity</p>\n          <b class=\"about_film-date\">${popularity}</b>\n          </div>\n          <div class=\"about_film-item\">\n          <p class=\"about_film-text\">Original Title</p>\n          <b class=\"about_film-date\">${\n            original_title ? original_title : original_name\n          }</b>\n          </div>\n          <div class=\"about_film-item\">\n          <p class=\"about_film-text\">Genre</p>\n          <b class=\"about_film-date\">${\n            genres ? genres.map(genre => genre.name) : ' '\n          }</b>\n          </div>\n          <h2 class=\"about_film-pretitle\">ABOUT</h2>\n          <p class=\"about_film-overview\">${overview}</p>\n        </div>\n      </div>`;\n}\n","export default async function fetchFilmModal(movie_id) {\n  const KEY_API = '024bf82d4805f650033dc69997860333';\n  const url = `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${KEY_API}`;\n  console.log(url);\n  const response = await fetch(url);\n  const movie = await response.json();\n  return movie;\n}\n","import NewApiSearchFilms from './NewApiSearchFilms';\nimport NewApiPopularFilms from './NewApiPopularFilms';\nimport createFilmsList from './createFilmsList';\nimport createFilmCard from './createFilmCard';\nimport fetchFilmModal from './fetchFilmModal';\nconst KEY_API = '024bf82d4805f650033dc69997860333';\n\n// async function fetchFilmModal(movie_id) {\n//   const url = `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${KEY_API}`;\n//   console.log(url);\n//   const response = await fetch(url);\n//   const movie = await response.json();\n//   return movie;\n// }\n\nconst newApiSearchFilm = new NewApiSearchFilms();\nconst newApiPopularFilms = new NewApiPopularFilms();\n\nconst btn = document.querySelector('.button_all');\nconst filmsContainer = document.querySelector('.films_all');\nconst backdropEl = document.querySelector('.backdrop');\nconst modalFilmInfoEl = document.querySelector('.modal_film-info');\nconst btnModal = document.querySelector('.modal__button--close');\nconst formEl = document.querySelector('.search-form');\n\nbtn.addEventListener('click', startPopularFilms);\n\nasync function startPopularFilms() {\n  clearFilmsContainer();\n  newApiPopularFilms.resetPage();\n  try {\n    const dates = await newApiPopularFilms.fetchFilmsCards();\n    console.log(dates);\n    const markup = createFilmsList(dates);\n    filmsContainer.insertAdjacentHTML('afterbegin', markup);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\n// function createFilmsList(dates) {\n//   const filmArray = dates[0].results;\n//   const genreArray = dates[1].genres;\n//   return filmArray\n//     .map(\n//       ({\n//         original_title,\n//         poster_path,\n//         original_name,\n//         genre_ids,\n//         release_date,\n//         id,\n//       }) => {\n//         return `<div class=\"film-card\">\n//         <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\"  alt=\"\" loading=\"lazy\" data-id=${id} />\n//         <div class=\"info\">\n//           <p class=\"film-name\">${\n//             original_title ? original_title : original_name\n//           }\n//           </p>\n//           <p class=\"info-item\">\n//             <b>${genreArray\n//               .reduce((listGenre, genre) => {\n//                 if (genre_ids.includes(genre.id)) {\n//                   listGenre.push(` ${genre.name}`);\n//                 }\n//                 return listGenre;\n//               }, [])\n//               .slice(0, 2)\n//               .concat([' Other'])} </b >\n//             <b>|</b>\n//             <b>${release_date ? release_date.slice(0, 4) : '-'}</b>\n//           </p>\n//         </div>\n//       </div>`;\n//       }\n//     )\n//     .join('');\n// }\n\nfilmsContainer.addEventListener('click', onFilmClick);\nbtnModal.addEventListener('click', onBtnModalClick);\n\nfunction onFilmClick(event) {\n  modalFilmInfoEl.innerHTML = '';\n  console.log(event.target);\n  console.log(event.currentTarget);\n  if (!event.target.dataset.id) {\n    return;\n  } else {\n    console.log(event.target.dataset.id);\n    fetchFilmModal(event.target.dataset.id)\n      .then(movie => {\n        console.log(movie);\n        if (!movie) {\n          return alert('The resource you requested could not be found.');\n        } else {\n          addBtn.setAttribute('data-id', `${movie.id}`);\n          queueBtn.setAttribute('data-id', `${movie.id}`);\n          const markup = createFilmCard(movie);\n          backdropEl.classList.remove('is-hidden');\n          document.body.classList.toggle('modal-open');\n          modalFilmInfoEl.insertAdjacentHTML('beforeend', markup);\n        }\n      })\n      .catch(error => console.log(error));\n  }\n}\n\n// function createFilmCard(movie) {\n//   const {\n//     vote_average,\n//     vote_count,\n//     genres,\n//     original_title,\n//     poster_path,\n//     original_name,\n//     popularity,\n//     overview,\n//     id,\n//   } = movie;\n//   console.log(genres);\n\n//   return `<div class=\"about_film-card\">\n//          <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\" class=\"about_film-img\" alt=\"\" loading=\"lazy\" data-id=${id} />\n//         <div class=\"about_film-info\">\n//           <h1 class=\"about_film-name\">${\n//             original_title ? original_title : original_name\n//           }\n//           </h1>\n//           <div class=\"about_film-item\">\n//           <p class=\"about_film-text\">Vote / Votes</p>\n//           <b class=\"about_film-date\">${vote_average} / ${vote_count}</b>\n//           </div>\n//           <div class=\"about_film-item\">\n//           <p class=\"about_film-text\">Popularity</p>\n//           <b class=\"about_film-date\">${popularity}</b>\n//           </div>\n//           <div class=\"about_film-item\">\n//           <p class=\"about_film-text\">Original Title</p>\n//           <b class=\"about_film-date\">${\n//             original_title ? original_title : original_name\n//           }</b>\n//           </div>\n//           <div class=\"about_film-item\">\n//           <p class=\"about_film-text\">Genre</p>\n//           <b class=\"about_film-date\">${\n//             genres ? genres.map(genre => genre.name) : ' '\n//           }</b>\n//           </div>\n//           <h2 class=\"about_film-pretitle\">ABOUT</h2>\n//           <p class=\"about_film-overview\">${overview}</p>\n//         </div>\n//       </div>`;\n// }\n\nfunction onBtnModalClick() {\n  backdropEl.classList.add('is-hidden');\n  document.body.classList.toggle('modal-open');\n}\n\nfunction clearFilmsContainer() {\n  filmsContainer.innerHTML = '';\n}\n\nformEl.addEventListener('submit', onSearchFilm);\n\nfunction onSearchFilm(event) {\n  event.preventDefault();\n  clearFilmsContainer();\n\n  newApiSearchFilm.query =\n    event.currentTarget.elements.searchQuery.value.trim();\n  console.log(newApiSearchFilm.searchQuery);\n  if (newApiSearchFilm.query === '') {\n    return alert('Please enter search data.');\n  }\n  newApiSearchFilm.resetPage();\n\n  newApiSearchFilm\n    .searchFilm()\n    .then(dates => {\n      console.log(dates);\n      const filmArray = dates[0].results;\n      const genreArray = dates[1].genres;\n      console.log(filmArray);\n      console.log(genreArray);\n\n      if (filmArray.length === 0) {\n        return alert(\n          'Sorry, there are no images matching your search query. Please try again.'\n        );\n      } else {\n        const markup = createFilmsList(dates);\n        filmsContainer.insertAdjacentHTML('afterbegin', markup);\n      }\n    })\n    .catch(error => console.log(error));\n}\n\nconst ADDTOWATCHED_KEY = 'add-to-watchet-id';\nconst moviesId = [];\n\nconst addBtn = document.querySelector('.modal__button--watched');\nconst queueBtn = document.querySelector('.modal__button--queue');\naddBtn.addEventListener('click', onAddBtnClick);\n\nfunction onAddBtnClick(event) {\n  console.dir(event.target.dataset.id);\n  if (localStorage.getItem(ADDTOWATCHED_KEY)) {\n    const parsedMoviesId = JSON.parse(localStorage.getItem(ADDTOWATCHED_KEY));\n    parsedMoviesId.push(event.target.dataset.id);\n    localStorage.setItem(ADDTOWATCHED_KEY, JSON.stringify(parsedMoviesId));\n  } else {\n    moviesId.push(event.target.dataset.id);\n    localStorage.setItem(ADDTOWATCHED_KEY, JSON.stringify(moviesId));\n  }\n}\n","export default class NewApiSearchFilms {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n  }\n\n  async searchFilm() {\n    const KEY_API = '024bf82d4805f650033dc69997860333';\n    const festFetch = `https://api.themoviedb.org/3/search/movie?api_key=${KEY_API}&language=en-US&page=1&include_adult=false&query=${this.searchQuery}&page=${this.page}`;\n    const secondFetch = `https://api.themoviedb.org/3/genre/movie/list?api_key=${KEY_API}&language=en-US`;\n    const dateIds = [festFetch, secondFetch];\n\n    const arrayOfPromises = dateIds.map(async userId => {\n      const response = await fetch(`${userId}`);\n      return response.json();\n    });\n\n    const dates = await Promise.all(arrayOfPromises);\n    return dates;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n}\n","export default class NewApiPopularFilms {\n  constructor() {\n    this.page = 1;\n  }\n\n  async fetchFilmsCards() {\n    const KEY_API = '024bf82d4805f650033dc69997860333';\n    const festFetch = `https://api.themoviedb.org/3/trending/movie/day?api_key=${KEY_API}&page=1`;\n    const secondFetch = `https://api.themoviedb.org/3/genre/movie/list?api_key=${KEY_API}&language=en-US`;\n    const dateIds = [festFetch, secondFetch];\n\n    const arrayOfPromises = dateIds.map(async userId => {\n      const response = await fetch(`${userId}`);\n      return response.json();\n    });\n\n    const dates = await Promise.all(arrayOfPromises);\n    return dates;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n}\n"],"names":["$d67053245c9b923f$export$2e2bcd8739ae039","dates","filmArray","results","genreArray","genres","map","original_title","poster_path","original_name","genre_ids","release_date","id","reduce","listGenre","genre","includes","push","name","slice","concat","join","$d3c8e8c738c2c614$export$2e2bcd8739ae039","movie","vote_average","vote_count","popularity","overview","console","log","async","$8c9c9e0800d61009$export$2e2bcd8739ae039","movie_id","url","response","fetch","json","$1f0dc3b9307be026$var$newApiSearchFilm","KEY_API","arrayOfPromises","this","searchQuery","page","userId","Promise","all","query","newQuery","resetPage","incrementPage","constructor","$1f0dc3b9307be026$var$newApiPopularFilms","$1f0dc3b9307be026$var$btn","document","querySelector","$1f0dc3b9307be026$var$filmsContainer","$1f0dc3b9307be026$var$backdropEl","$1f0dc3b9307be026$var$modalFilmInfoEl","$1f0dc3b9307be026$var$btnModal","$1f0dc3b9307be026$var$formEl","$1f0dc3b9307be026$var$clearFilmsContainer","innerHTML","addEventListener","fetchFilmsCards","markup","insertAdjacentHTML","error","message","event","target","currentTarget","dataset","then","alert","$1f0dc3b9307be026$var$addBtn","setAttribute","$1f0dc3b9307be026$var$queueBtn","classList","remove","body","toggle","catch","add","preventDefault","elements","value","trim","searchFilm","length","$1f0dc3b9307be026$var$moviesId","dir","localStorage","getItem","parsedMoviesId","JSON","parse","setItem","stringify"],"version":3,"file":"index.643e5591.js.map"}