{"mappings":"AAkEA,MAAMA,EAAMC,SAASC,cAAc,eAC7BC,EAAiBF,SAASC,cAAc,cAC9CF,EAAII,iBACF,SAQAC,UACE,IACE,MAAMC,QA9EZD,iBACE,MAMME,EAFU,CAHd,yFAEA,yGAG8BC,KAAIH,MAAMI,UACjBC,MAAM,GAAGD,MAChBE,SAIlB,aADoBC,QAAQC,IAAIN,GAkERO,GACpBC,QAAQC,IAAIV,GACZ,MAAMW,EAQZ,SAAqBX,GACnB,MAAMY,EAAYZ,EAAM,GAAGa,QACrBC,EAAad,EAAM,GAAGe,OAe5B,OAHAN,QAAQC,IAAIE,GACZH,QAAQC,IAAII,GAELF,EACJV,KACC,EAACc,eACCA,EAAcC,YACdA,EAAWC,cACXA,EAAaC,UACbA,EAASC,aACTA,EAAYC,eACZA,MAEAZ,QAAQC,IAAI,GAAGM,KACR,6EACoCC,2FAGvCD,GAAkCE,sEAI7BJ,EAAWQ,QAAO,CAACC,EAAWC,KAC7BL,EAAUM,SAASD,EAAME,KAC3BH,EAAUI,KAAK,IAAIH,EAAMI,QAEpBL,IACN,kDAGDH,EACIA,EAAaS,MAAM,EAAG,GACtBR,EAAeQ,MAAM,EAAG,0DAOrCC,KAAK,IA7DWC,CAAY/B,GAC3BH,EAAemC,mBAAmB,cAAerB,GACjD,MAAOsB,GACPxB,QAAQC,IAAIuB,EAAMC","sources":["src/index.js"],"sourcesContent":["const KEY_API = '024bf82d4805f650033dc69997860333';\nasync function fetchFilmsCards() {\n  const festFetch =\n    'https://api.themoviedb.org/3/trending/all/day?api_key=024bf82d4805f650033dc69997860333';\n  const secondFetch =\n    'https://api.themoviedb.org/3/genre/movie/list?api_key=024bf82d4805f650033dc69997860333&language=en-US';\n  const userIds = [festFetch, secondFetch];\n\n  const arrayOfPromises = userIds.map(async userId => {\n    const response = await fetch(`${userId}`);\n    return response.json();\n  });\n\n  const users = await Promise.all(arrayOfPromises);\n  return users;\n}\n\n// async function fetchgenre() {\n//   const response = await fetch(\n//     'https://api.themoviedb.org/3/genre/movie/list?api_key=024bf82d4805f650033dc69997860333&language=en-US'\n//   );\n//   const genresJson = await response.json();\n//   return genresJson;\n// }\n\n// let geners;\n\n// const doStuff = async () => {\n//   try {\n//     geners = await fetchgenre();\n//     console.log(geners);\n//   } catch (error) {\n//     console.log(error.message);\n//   }\n// };\n\n// doStuff();\n\nfunction fetchAllFilms() {\n  return fetch(\n    'https://api.themoviedb.org/3/trending/all/day?api_key=024bf82d4805f650033dc69997860333'\n  ).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response.json();\n  });\n}\n\n// function genreFilms() {\n//   return fetch(\n//     'https://api.themoviedb.org/3/genre/movie/list?api_key=024bf82d4805f650033dc69997860333&language=en-US'\n//   ).then(response => {\n//     if (!response.ok) {\n//       throw new Error(response.status);\n//     }\n//     return response.json();\n//   });\n// }\n\n// genreFilms()\n//   .then(genres => {\n//     console.log(genres);\n//   })\n//   .catch(error => console.log(error));\n\nconst btn = document.querySelector('.button_all');\nconst filmsContainer = document.querySelector('.films_all');\nbtn.addEventListener(\n  'click',\n  // () => {\n  //   fetchAllFilms()\n  //     .then(films => {\n  //       const markup = randerFilms(films);\n  //       filmsContainer.insertAdjacentHTML('beforebegin', markup);\n  //     })\n  //     .catch(error => console.log(error));\n  async () => {\n    try {\n      const users = await fetchFilmsCards();\n      console.log(users);\n      const markup = randerFilms(users);\n      filmsContainer.insertAdjacentHTML('beforebegin', markup);\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n);\n\nfunction randerFilms(users) {\n  const filmArray = users[0].results;\n  const genreArray = users[1].genres;\n\n  function list(array) {\n    genreArray.reduce((listGenre, genre) => {\n      console.log(genre.id);\n      if (array.includes(genre.id)) {\n        listGenre.push(genre.name);\n        return listGenre;\n      }\n    }, []);\n  }\n\n  console.log(filmArray);\n  console.log(genreArray);\n  // console.log(genreFilms);\n  return filmArray\n    .map(\n      ({\n        original_title,\n        poster_path,\n        original_name,\n        genre_ids,\n        release_date,\n        first_air_date,\n      }) => {\n        console.log(`${original_title}`);\n        return `<div class=\"film-card\">\n        <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"\" loading=\"lazy\" />\n        <div class=\"info\">\n          <p class=\"film-name\">${\n            original_title ? original_title : original_name\n          }\n          </p>\n          <p class=\"info-item\">\n            <b>${genreArray.reduce((listGenre, genre) => {\n              if (genre_ids.includes(genre.id)) {\n                listGenre.push(` ${genre.name}`);\n              }\n              return listGenre;\n            }, [])}</b>\n            <b>||</b>\n            <b>${\n              release_date\n                ? release_date.slice(0, 4)\n                : first_air_date.slice(0, 4)\n            }</b>\n          </p>\n        </div>\n      </div>`;\n      }\n    )\n    .join('');\n}\n"],"names":["$1f0dc3b9307be026$var$btn","document","querySelector","$1f0dc3b9307be026$var$filmsContainer","addEventListener","async","users","arrayOfPromises","map","userId","fetch","json","Promise","all","$1f0dc3b9307be026$var$fetchFilmsCards","console","log","markup","filmArray","results","genreArray","genres","original_title","poster_path","original_name","genre_ids","release_date","first_air_date","reduce","listGenre","genre","includes","id","push","name","slice","join","$1f0dc3b9307be026$var$randerFilms","insertAdjacentHTML","error","message"],"version":3,"file":"index.416f0860.js.map"}