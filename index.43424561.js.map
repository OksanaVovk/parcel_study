{"mappings":"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","sources":["src/index.js","src/NewApiSearchFilms.js","src/NewApiPopularFilms.js"],"sourcesContent":["import NewApiSearchFilms from './NewApiSearchFilms';\nimport NewApiPopularFilms from './NewApiPopularFilms';\nconst KEY_API = '024bf82d4805f650033dc69997860333';\n\nasync function fetchFilmModal(movie_id) {\n  const url = `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${KEY_API}`;\n  console.log(url);\n  const response = await fetch(url);\n  const movie = await response.json();\n  return movie;\n}\n\nconst newApiSearchFilm = new NewApiSearchFilms();\nconst newApiPopularFilms = new NewApiPopularFilms();\n\nconst btn = document.querySelector('.button_all');\nconst filmsContainer = document.querySelector('.films_all');\nconst backdropEl = document.querySelector('.backdrop');\nconst modalFilmInfoEl = document.querySelector('.modal_film-info');\nconst btnModal = document.querySelector('.modal__button--close');\nconst formEl = document.querySelector('.search-form');\n\nbtn.addEventListener('click', startPopularFilms);\n\nasync function startPopularFilms() {\n  clearFilmsContainer();\n  newApiPopularFilms.resetPage();\n  try {\n    const dates = await newApiPopularFilms.fetchFilmsCards();\n    console.log(dates);\n    const markup = createFilmsList(dates);\n    filmsContainer.insertAdjacentHTML('afterbegin', markup);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nfunction createFilmsList(dates) {\n  const filmArray = dates[0].results;\n  const genreArray = dates[1].genres;\n  console.log(filmArray);\n  console.log(genreArray);\n\n  // function genreLiist(genreArray, genre_ids) {\n  //   genreArray.reduce((listGenre, genre) => {\n  //     if (genre_ids.includes(genre.id)) {\n  //       listGenre.push(` ${genre.name}`);\n  //     }\n  //   }, []);\n  //   console.log(listGenre);\n  //   return listGenre.slice(0, 3);\n  // }\n\n  return filmArray\n    .map(\n      ({\n        original_title,\n        poster_path,\n        original_name,\n        genre_ids,\n        release_date,\n        id,\n      }) => {\n        return `<div class=\"film-card\">\n        <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\"  alt=\"\" loading=\"lazy\" data-id=${id} />\n        <div class=\"info\">\n          <p class=\"film-name\">${\n            original_title ? original_title : original_name\n          }\n          </p>\n          <p class=\"info-item\">\n            <b>${genreArray\n              .reduce((listGenre, genre) => {\n                if (genre_ids.includes(genre.id)) {\n                  listGenre.push(` ${genre.name}`);\n                }\n                return listGenre;\n              }, [])\n              .slice(0, 2)\n              .concat([' Other'])} </b >\n            <b>|</b>\n            <b>${release_date ? release_date.slice(0, 4) : '-'}</b>\n          </p>\n        </div>\n      </div>`;\n      }\n    )\n    .join('');\n}\n\nfilmsContainer.addEventListener('click', onFilmClick);\nbtnModal.addEventListener('click', onBtnModalClick);\n\nfunction onFilmClick(event) {\n  modalFilmInfoEl.innerHTML = '';\n  console.log(event.target);\n  console.log(event.currentTarget);\n  if (!event.target.dataset.id) {\n    return;\n  } else {\n    console.log(event.target.dataset.id);\n    fetchFilmModal(event.target.dataset.id)\n      .then(movie => {\n        console.log(movie);\n        if (!movie) {\n          return alert('The resource you requested could not be found.');\n        } else {\n          const markup = createFilmCard(movie);\n          backdropEl.classList.remove('is-hidden');\n          modalFilmInfoEl.insertAdjacentHTML('beforeend', markup);\n        }\n      })\n      .catch(error => console.log(error));\n  }\n}\n\nfunction createFilmCard(movie) {\n  const {\n    vote_average,\n    vote_count,\n    genres,\n    original_title,\n    poster_path,\n    original_name,\n    popularity,\n    overview,\n    id,\n  } = movie;\n  console.log(genres);\n\n  return `<div class=\"about_film-card\">\n         <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\" class=\"about_film-img\" alt=\"\" loading=\"lazy\" data-id=${id} />\n        <div class=\"about_film-info\">\n          <h1 class=\"about_film-name\">${\n            original_title ? original_title : original_name\n          }\n          </h1>\n          <div class=\"about_film-item\">\n          <p class=\"about_film-text\">Vote / Votes</p>\n          <b class=\"about_film-date\">${vote_average} / ${vote_count}</b>\n          </div>\n          <div class=\"about_film-item\">\n          <p class=\"about_film-text\">Popularity</p>\n          <b class=\"about_film-date\">${popularity}</b>\n          </div>\n          <div class=\"about_film-item\">\n          <p class=\"about_film-text\">Original Title</p>\n          <b class=\"about_film-date\">${\n            original_title ? original_title : original_name\n          }</b>\n          </div>\n          <div class=\"about_film-item\">\n          <p class=\"about_film-text\">Genre</p>\n          <b class=\"about_film-date\">${\n            genres ? genres.map(genre => genre.name) : ' '\n          }</b>\n          </div>\n          <h2 class=\"about_film-pretitle\">ABOUT</h2>\n          <p class=\"about_film-overview\">${overview}</p>\n        </div>\n      </div>`;\n}\n\nfunction onBtnModalClick() {\n  backdropEl.classList.add('is-hidden');\n}\n\nfunction clearFilmsContainer() {\n  filmsContainer.innerHTML = '';\n}\n\nformEl.addEventListener('submit', onSearchFilm);\n\nfunction onSearchFilm(event) {\n  event.preventDefault();\n  clearFilmsContainer();\n\n  newApiSearchFilm.query =\n    event.currentTarget.elements.searchQuery.value.trim();\n  console.log(newApiSearchFilm.searchQuery);\n  if (newApiSearchFilm.query === '') {\n    return alert('Please enter search data.');\n  }\n  newApiSearchFilm.resetPage();\n\n  newApiSearchFilm\n    .searchFilm()\n    .then(dates => {\n      console.log(dates);\n      const filmArray = dates[0].results;\n      const genreArray = dates[1].genres;\n      console.log(filmArray);\n      console.log(genreArray);\n\n      if (filmArray.length === 0) {\n        return alert(\n          'Sorry, there are no images matching your search query. Please try again.'\n        );\n      } else {\n        const markup = createFilmsList(dates);\n        filmsContainer.insertAdjacentHTML('afterbegin', markup);\n      }\n    })\n    .catch(error => console.log(error));\n}\n","export default class NewApiSearchFilms {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n  }\n\n  async searchFilm() {\n    const KEY_API = '024bf82d4805f650033dc69997860333';\n    const festFetch = `https://api.themoviedb.org/3/search/movie?api_key=${KEY_API}&language=en-US&page=1&include_adult=false&query=${this.searchQuery}&page=${this.page}`;\n    const secondFetch = `https://api.themoviedb.org/3/genre/movie/list?api_key=${KEY_API}&language=en-US`;\n    const dateIds = [festFetch, secondFetch];\n\n    const arrayOfPromises = dateIds.map(async userId => {\n      const response = await fetch(`${userId}`);\n      return response.json();\n    });\n\n    const dates = await Promise.all(arrayOfPromises);\n    return dates;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n}\n","export default class NewApiPopularFilms {\n  constructor() {\n    this.page = 1;\n  }\n\n  async fetchFilmsCards() {\n    const KEY_API = '024bf82d4805f650033dc69997860333';\n    const festFetch = `https://api.themoviedb.org/3/trending/movie/day?api_key=${KEY_API}&page=1`;\n    const secondFetch = `https://api.themoviedb.org/3/genre/movie/list?api_key=${KEY_API}&language=en-US`;\n    const dateIds = [festFetch, secondFetch];\n\n    const arrayOfPromises = dateIds.map(async userId => {\n      const response = await fetch(`${userId}`);\n      return response.json();\n    });\n\n    const dates = await Promise.all(arrayOfPromises);\n    return dates;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n}\n"],"names":["$1f0dc3b9307be026$var$newApiSearchFilm","async","KEY_API","arrayOfPromises","this","searchQuery","page","map","userId","fetch","json","Promise","all","query","newQuery","resetPage","incrementPage","constructor","$1f0dc3b9307be026$var$newApiPopularFilms","$1f0dc3b9307be026$var$btn","document","querySelector","$1f0dc3b9307be026$var$filmsContainer","$1f0dc3b9307be026$var$backdropEl","$1f0dc3b9307be026$var$modalFilmInfoEl","$1f0dc3b9307be026$var$btnModal","$1f0dc3b9307be026$var$formEl","$1f0dc3b9307be026$var$createFilmsList","dates","filmArray","results","genreArray","genres","console","log","original_title","poster_path","original_name","genre_ids","release_date","id","reduce","listGenre","genre","includes","push","name","slice","concat","join","$1f0dc3b9307be026$var$clearFilmsContainer","innerHTML","addEventListener","fetchFilmsCards","markup","insertAdjacentHTML","error","message","event","target","currentTarget","dataset","movie_id","url","response","$1f0dc3b9307be026$var$fetchFilmModal","then","movie","alert","vote_average","vote_count","popularity","overview","$1f0dc3b9307be026$var$createFilmCard","classList","remove","catch","add","preventDefault","elements","value","trim","searchFilm","length"],"version":3,"file":"index.43424561.js.map"}